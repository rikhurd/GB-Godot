[gd_resource type="ShaderMaterial" load_steps=2 format=3 uid="uid://c3t28jbckblwd"]

[sub_resource type="Shader" id="Shader_g3eny"]
code = "shader_type spatial;
render_mode unshaded, blend_mix, cull_back;

uniform vec2 grid_size_xy = vec2(3.0, 3.0);
uniform float cell_size = 1.0;
uniform float gutter_size = 0.04;
uniform vec4 cell_color : source_color = vec4(0.078, 0.024, 0.0, 0.5); // alpha = 0.5
uniform vec4 gutter_color : source_color = vec4(0.922, 0.376, 0.0, 1.0);
uniform float cell_roundedness : hint_range(0.0, 0.9999) = 0.0;

group_uniforms CellManipulator;
uniform float cell_manipulator_radius = 0.0;
uniform vec2 cell_manipulator_uv_pos = vec2(0.5, 0.5);
uniform float manipulated_cell_size = 2.5;
uniform vec4 manipulator_gutter_color : source_color = vec4(1.0, 1.0, 1.0, 1.0);
uniform float cell_manipulation_anim_speed = 1.0;

group_uniforms GutterNoise;
uniform vec3 gutter_noise_color : source_color = vec3(1.0, 1.0, 1.0);
uniform sampler2D gutter_noise: source_color;
uniform float gutter_noise_speed = 0.1;

group_uniforms Fresnel;
uniform vec3 fresnel_color : source_color = vec3(0.675, 0.192, 0.0);
uniform float fresnel_intensity = 0.2;
uniform float fresnel_amount = 15.0;

vec4 square_rounded(vec2 uv, float width, float radius) {
    uv = uv * 2.0 - 1.0;
    radius *= width;
    vec2 abs_uv = abs(uv.xy) - radius;
    vec2 dist = max(abs_uv, 0.0);
    float square = step(width - radius, length(dist));
    return vec4(vec3(square), square);
}

vec3 fresnel_glow(float amount, float intensity, vec3 color, vec3 normal, vec3 view) {
    return pow((1.0 - dot(normalize(normal), normalize(view))), amount) * color * intensity;
}

void fragment() {
    vec2 _min_cell_size = vec2(
        manipulated_cell_size / grid_size_xy.x,
        manipulated_cell_size / grid_size_xy.y
    );
    vec2 _max_cell_size = vec2(
        cell_size / grid_size_xy.x,
        cell_size / grid_size_xy.y
    );

    float _target_radius = cell_manipulator_radius / max(grid_size_xy.x, grid_size_xy.y);

    vec2 cell_coord = floor(UV / _max_cell_size);
    vec2 cell_center = cell_coord * _max_cell_size + _max_cell_size * 0.5;

    float anim_t = (sin(TIME * cell_manipulation_anim_speed * 2.0 * PI) * 0.5) + 0.5;
    vec2 animated_cell_size = mix(_min_cell_size, _max_cell_size * 0.75, anim_t);

    float cell_dist = distance(cell_center, cell_manipulator_uv_pos);
    float cell_dist_t = clamp(cell_dist / _target_radius, 0.0, 1.0);

    float px_dist = distance(UV, cell_manipulator_uv_pos);
    float px_dist_t = clamp(px_dist / _target_radius, 0.0, 1.0);

    vec2 _cell_size = mix(animated_cell_size, _max_cell_size, cell_dist_t);

    vec2 aligned_uv = UV / _max_cell_size;
    vec2 grid_uv = fract(aligned_uv);
    vec2 adjusted_uv = (grid_uv - 0.5) * (_max_cell_size / _cell_size) + 0.5;

    float _gutter_size = gutter_size * max(_max_cell_size.x, _max_cell_size.y) / max(_cell_size.x, _cell_size.y);
    float gutter_half = _gutter_size * 0.5;

    vec4 _gutter_color = mix(manipulator_gutter_color, gutter_color, px_dist_t);
    vec4 noise = texture(gutter_noise, UV + (vec2(0, 1) * gutter_noise_speed * TIME));
    vec4 color_noise = vec4(noise.rgb * gutter_noise_color, 1.0);
    vec3 mixed_gutter_color = (_gutter_color + color_noise).rgb;
    mixed_gutter_color = mix(mixed_gutter_color, _gutter_color.rgb, px_dist_t);

    // Default alpha = 1 for gutters
    ALPHA = 1.0;

    if (adjusted_uv.x < gutter_half || adjusted_uv.x > 1.0 - gutter_half || adjusted_uv.y < gutter_half || adjusted_uv.y > 1.0 - gutter_half) {
        ALBEDO = mixed_gutter_color;
        ALPHA = 1.0; // gutters fully opaque
    } else {
        vec4 square_result = square_rounded(adjusted_uv, 1.0 - _gutter_size, 0.9999 - cell_roundedness);
        if (square_result.a <= 0.0) {
            ALBEDO = cell_color.rgb;
            ALPHA = cell_color.a; // now cells respect their alpha
        } else {
            ALBEDO = mixed_gutter_color;
            ALPHA = 1.0;
        }
    }

    // Fresnel glow modulated by cell alpha
    vec3 glow = fresnel_glow(fresnel_amount, fresnel_intensity, fresnel_color, NORMAL, VIEW);
    ALBEDO += glow * ALPHA;
}
"

[resource]
render_priority = 0
shader = SubResource("Shader_g3eny")
shader_parameter/grid_size_xy = Vector2(13, 12)
shader_parameter/cell_size = 1.0
shader_parameter/gutter_size = 0.04
shader_parameter/cell_color = Color(0.14400002, 0.53459996, 0.9, 0.078431375)
shader_parameter/gutter_color = Color(0.77, 0.77, 0.77, 0.42745098)
shader_parameter/cell_roundedness = 0.0
shader_parameter/cell_manipulator_radius = 0.0
shader_parameter/cell_manipulator_uv_pos = Vector2(0.5, 0.5)
shader_parameter/manipulated_cell_size = 2.5
shader_parameter/manipulator_gutter_color = Color(1, 1, 1, 1)
shader_parameter/cell_manipulation_anim_speed = 1.0
shader_parameter/gutter_noise_color = Color(1, 1, 1, 1)
shader_parameter/gutter_noise_speed = 0.1
shader_parameter/fresnel_color = Color(0.675, 0.192, 0, 1)
shader_parameter/fresnel_intensity = 0.2
shader_parameter/fresnel_amount = 15.0
